{"version":3,"sources":["MatchData.tsx","component/Round.tsx","actions/winner.action.ts","reducers/winner.reducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MatchData","match","id","s","r","m","seed","number","participant","_id","name","score","Participant","this","props","matches","idx","hover_id","onHover","onOut","round","is_winner_idx","className","onPointerEnter","onPointerLeave","style","display","React","Component","ParticipantConnected","connect","state","dispatch","type","actions","Math","map","item","key","settingMatch","RoundList","Rounds","match_round1","match_round2","match_round3","push","round1","round2","round3","Matches","Matche","divLength","hidden","tabIndex","roundMatch","roundTab","initialState","store","createStore","action","App","Boolean","window","location","hostname","Object","assign","target","TypeError","index","arguments","length","source","prototype","hasOwnProperty","call","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c19150ed.chunk.js","sourcesContent":["import { IMatch } from \"./interface\";\r\nexport const MatchData: {\r\n  match: IMatch[];\r\n} = {\r\n  match: [\r\n    {\r\n      id: {\r\n        s: 1,\r\n        r: 1,\r\n        m: 1\r\n      },\r\n      seed: [1, 8],\r\n      number: 1,\r\n      participant: [\r\n        {\r\n          _id: 20469,\r\n          name: \"Obi-Wan Kenobi\"\r\n        },\r\n        {\r\n          _id: 20491,\r\n          name: \"Chinatown (1974)\"\r\n        }\r\n      ],\r\n      score: [0, 1]\r\n    },\r\n    {\r\n      id: {\r\n        s: 1,\r\n        r: 1,\r\n        m: 2\r\n      },\r\n      seed: [5, 4],\r\n      number: 2,\r\n      participant: [\r\n        {\r\n          _id: 20528,\r\n          name: \"The Operative: No One Lives Forever\"\r\n        },\r\n        {\r\n          _id: 20521,\r\n          name: \"Lamassu\"\r\n        }\r\n      ],\r\n\r\n      score: [0, 1]\r\n    },\r\n    {\r\n      id: {\r\n        s: 1,\r\n        r: 1,\r\n        m: 3\r\n      },\r\n      seed: [3, 6],\r\n      number: 3,\r\n      participant: [\r\n        {\r\n          _id: 20494,\r\n          name: \"Cybercon III\"\r\n        },\r\n        {\r\n          _id: 20515,\r\n          name: \"Starship Troopers\"\r\n        }\r\n      ],\r\n\r\n      score: [0, 1]\r\n    },\r\n    {\r\n      id: {\r\n        s: 1,\r\n        r: 1,\r\n        m: 4\r\n      },\r\n      seed: [7, 2],\r\n      number: 4,\r\n      participant: [\r\n        {\r\n          _id: 20535,\r\n          name: \"Combat Roll\"\r\n        },\r\n        {\r\n          _id: 20453,\r\n          name: \"The Big Lebowski (1998)\"\r\n        }\r\n      ],\r\n      score: [1, 0]\r\n    },\r\n    {\r\n      id: {\r\n        s: 1,\r\n        r: 2,\r\n        m: 1\r\n      },\r\n      seed: [8, 4],\r\n      number: 5,\r\n      participant: [\r\n        {\r\n          _id: 20491,\r\n          name: \"Chinatown (1974)\"\r\n        },\r\n        {\r\n          _id: 20521,\r\n          name: \"Lamassu\"\r\n        }\r\n      ],\r\n      score: [0, 1]\r\n    },\r\n    {\r\n      id: {\r\n        s: 1,\r\n        r: 2,\r\n        m: 2\r\n      },\r\n      seed: [6, 7],\r\n      number: 6,\r\n      participant: [\r\n        {\r\n          _id: 20515,\r\n          name: \"Starship Troopers\"\r\n        },\r\n        {\r\n          _id: 20535,\r\n          name: \"Combat Roll\"\r\n        }\r\n      ],\r\n      score: [0, 1]\r\n    },\r\n    {\r\n      id: {\r\n        s: 1,\r\n        r: 3,\r\n        m: 1\r\n      },\r\n      seed: [4, 7],\r\n      number: 7,\r\n      participant: [\r\n        {\r\n          _id: 20521,\r\n          name: \"Lamassu\"\r\n        },\r\n        {\r\n          _id: 20535,\r\n          name: \"Combat Roll\"\r\n        }\r\n      ],\r\n      score: [0, 1]\r\n    }\r\n  ]\r\n};\r\n","import React from \"react\";\r\nimport { IRound, IMatch, IParticipantData, IParticipant } from \"./../interface\";\r\nimport { MatchData } from \"./../MatchData\";\r\nimport * as actions from \"../actions/winner.action\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./Round.scss\";\r\n\r\n// store 안의 state 값을 props 로 연결해줍니다. - 가져와서 뿌릴것\r\nconst mapStateToProps = (state: any) => ({\r\n  hover_id: state._id\r\n});\r\n\r\n/* \r\n    액션 생성자를 사용하여 액션을 생성하고,\r\n    해당 액션을 dispatch 하는 함수를 만들은 후, 이를 props 로 연결해줍니다. - 내가 변경하기 위해 사용할 action 함수\r\n*/\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  onHover: (_id: number) => dispatch(actions.addHover(_id)),\r\n  onOut: () => dispatch(actions.removeHover())\r\n});\r\n\r\nexport class Participant extends React.Component<\r\n  IParticipant & {\r\n    idx: number;\r\n    round: string;\r\n    hover_id: number;\r\n    onHover: (_id: number) => void;\r\n    onOut: () => void;\r\n  }\r\n> {\r\n  render() {\r\n    let {\r\n      _id,\r\n      name,\r\n      seed,\r\n      score,\r\n      matches,\r\n      idx,\r\n      hover_id,\r\n      onHover,\r\n      onOut,\r\n      round\r\n    } = this.props;\r\n    let is_winner_idx = 0;\r\n    if (score[0] < score[1]) {\r\n      is_winner_idx = 1;\r\n    }\r\n    return (\r\n      <li\r\n        className={\r\n          (hover_id === _id ? \" hovering\" : \"\") +\r\n          (matches[is_winner_idx] === _id && round === \"round3\"\r\n            ? \" winner\"\r\n            : \"\")\r\n        }\r\n        onPointerEnter={() => {\r\n          onHover(_id);\r\n        }}\r\n        onPointerLeave={() => {\r\n          onOut();\r\n        }}\r\n      >\r\n        <span className=\"seed\">{seed}</span>\r\n        <span className=\"name\">{name}</span>\r\n        <span className=\"score\">{score[idx]}</span>\r\n        <span\r\n          className=\"winner_cup\"\r\n          style={{\r\n            display:\r\n              matches[is_winner_idx] !== _id || round !== \"round3\"\r\n                ? \"block\"\r\n                : \"none\"\r\n          }}\r\n        >\r\n          승리\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\n// Participant 컴포넌트를 어플리케이션의 데이터 레이어와 묶는 역할을 합니다.\r\nconst ParticipantConnected = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Participant);\r\n\r\nexport class Math extends React.Component<IMatch> {\r\n  constructor(props: IMatch) {\r\n    super(props);\r\n  }\r\n  settingMatch() {\r\n    let { seed, score, participant, number, id } = this.props;\r\n    return participant.map((item, idx) => {\r\n      return (\r\n        <ParticipantConnected\r\n          matches={participant.map(item => item._id)}\r\n          seed={seed[idx]}\r\n          score={score}\r\n          idx={idx}\r\n          round={\"round\" + id.r}\r\n          key={\"Participant\" + item._id}\r\n          {...item}\r\n        />\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    let { number } = this.props;\r\n    return (\r\n      <div className=\"match\">\r\n        <i>{number}</i>\r\n        <ul>{this.settingMatch()}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport class RoundList extends React.Component {\r\n  public Rounds: IRound | null = null;\r\n\r\n  componentWillMount() {\r\n    let match_round1: IMatch[] = [];\r\n    let match_round2: IMatch[] = [];\r\n    let match_round3: IMatch[] = [];\r\n\r\n    MatchData.match.map((item: IMatch) => {\r\n      switch (item.id.r) {\r\n        case 1:\r\n          match_round1.push(item);\r\n          break;\r\n        case 2:\r\n          match_round2.push(item);\r\n          break;\r\n        case 3:\r\n          match_round3.push(item);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    this.Rounds = {\r\n      round1: match_round1,\r\n      round2: match_round2,\r\n      round3: match_round3\r\n    };\r\n  }\r\n  roundMatch(round: \"round1\" | \"round2\" | \"round3\") {\r\n    if (this.Rounds == null) return <></>;\r\n\r\n    let Matches: JSX.Element[] = [];\r\n    let Matche: JSX.Element[] = [];\r\n    let divLength: number = round === \"round1\" ? 2 : 1;\r\n\r\n    let matches = this.Rounds[round];\r\n    matches.map((item, idx) => {\r\n      if (idx % divLength === 0 || divLength === 1) {\r\n        Matche = [];\r\n      }\r\n      Matche.push(<Math {...item} key={\"Match\" + round + idx} />);\r\n      if (idx % divLength === 1 || divLength === 1) {\r\n        Matches.push(\r\n          <div className={\"wapper\"} key={\"MatchWapper\" + round + idx}>\r\n            <hr\r\n              className=\"vertical_line\"\r\n              hidden={round === \"round3\"}\r\n              tabIndex={-1}\r\n            />\r\n            <hr\r\n              className=\"horizon_line\"\r\n              hidden={round === \"round3\"}\r\n              tabIndex={-1}\r\n            />\r\n            <hr\r\n              className=\"horizon_line middle\"\r\n              hidden={round === \"round3\"}\r\n              tabIndex={-1}\r\n            />\r\n            <hr\r\n              className=\"horizon_line bottom\"\r\n              hidden={round === \"round3\"}\r\n              tabIndex={-1}\r\n            />\r\n            {[...Matche]}\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n    return Matches;\r\n  }\r\n  roundTab() {\r\n    if (this.Rounds == null) return <></>;\r\n    return (\r\n      <section className=\"RoundTabs\">\r\n        <ul>\r\n          <li>Round 1</li>\r\n          <li>Semifinals</li>\r\n          <li>Finals</li>\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n  render() {\r\n    let round1: JSX.Element[] = this.roundMatch(\"round1\") as JSX.Element[];\r\n    let round2: JSX.Element[] = this.roundMatch(\"round2\") as JSX.Element[];\r\n    let round3: JSX.Element[] = this.roundMatch(\"round3\") as JSX.Element[];\r\n    return (\r\n      <div className=\"RoundList\">\r\n        <h1>Stage 1 - Pool1</h1>\r\n        {this.roundTab()}\r\n        <section className=\"Matches\">\r\n          <div className={\"MathDetail one\"}>{round1}</div>\r\n          <div className={\"MathDetail two  auto_margin\"}>{round2}</div>\r\n          <div className={\"MathDetail three auto_margin\"}>{round3}</div>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const ADD_HOVERPLAYER = \"ADD_HOVERPLAYER\";\r\nexport const REMOVE_HOVERPLAYER = \"REMOVE_HOVERPLAYER\";\r\n\r\nexport const addHover = (_id: number) => ({\r\n  type: ADD_HOVERPLAYER,\r\n  _id: _id\r\n});\r\n\r\nexport const removeHover = () => ({\r\n  type: REMOVE_HOVERPLAYER\r\n});\r\n","import * as types from \"../actions/winner.action\";\r\n\r\n// 초기 상태를 정의합니다\r\nconst initialState = {\r\n  _id: -1\r\n};\r\n\r\nexport const hovering = (\r\n  state = initialState,\r\n  action: { type: any; _id: number }\r\n) => {\r\n  switch (action.type) {\r\n    case types.ADD_HOVERPLAYER:\r\n      return {\r\n        ...state,\r\n        _id: action._id\r\n      };\r\n    case types.REMOVE_HOVERPLAYER:\r\n      return {\r\n        ...state,\r\n        _id: -1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport { RoundList } from \"./component/Round\";\n// Redux 관련 불러오기\nimport { createStore } from \"redux\";\nimport { hovering } from \"./reducers/winner.reducer\";\nimport { Provider } from \"react-redux\";\nimport \"./App.scss\";\n\n// 스토어 생성\nconst store = createStore(hovering);\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <RoundList />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/* ie를 위한 특별 코드 */\nif (typeof Object.assign != \"function\") {\n  Object.assign = function(target: any) {\n    \"use strict\";\n    if (target == null) {\n      throw new TypeError(\"Cannot convert undefined or null to object\");\n    }\n\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n      if (source != null) {\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}